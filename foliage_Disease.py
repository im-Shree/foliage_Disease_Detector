# -*- coding: utf-8 -*-
"""Tomatodisease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K9dgg0VxZZbNu_MsisyQHQF6aUFMPQ50
"""

#!pip install tensorflow-gpu

from tensorflow import keras
from keras.utils.vis_utils import plot_model
from keras.applications.inception_v3 import InceptionV3
from glob import glob
from keras.layers import Flatten,Dense
from keras.models import Model
from keras.preprocessing.image import ImageDataGenerator,img_to_array,array_to_img,load_img

IMAGE_SIZE = [224,224]
train_path = "/content/drive/My Drive/Toamto /train "
valid_path = "/content/drive/My Drive/Toamto /valid "

#creating the inception layer
inception = InceptionV3(include_top=False,weights='imagenet',input_shape=IMAGE_SIZE + [3])

plot_model(inception,to_file='model.png')

#avoid training existing weights
for layer in inception.layers:
  layer.trainable = False

#will be used as no. of output layers
folders = glob('/content/drive/My Drive/Toamto /train /*')

folders

#flatten the output of inception model
x = Flatten()(inception.output)

prediction = Dense(len(folders),activation='softmax')(x)

#create model
model = Model(inputs=inception.input,outputs = prediction)
plot_model(model)

model.summary()

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

train_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,horizontal_flip=True,zoom_range=0.2)
test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory('/content/drive/My Drive/Toamto /train ',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = train_datagen.flow_from_directory('/content/drive/My Drive/Toamto /valid ',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=10,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)















